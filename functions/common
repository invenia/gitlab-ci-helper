#!/bin/bash

set -e  # Required to cause a job failure when any of these commands fail

function echo_eval {
    local green='\033[32m'
    local reset='\033[0m'

    local cmd="$@"
    echo -e "${green}$ ${cmd}${reset}" >&2
    eval "$cmd"
}

function handle_throttling {
    local cmd="$@"

    local retries_left=3
    local wait=15
    while true; do
        (eval "$cmd") && RC=$? || RC=$?

        # Note: Error code isn't specific to throttling and we may want to also
        # check against the output given by the command.
        if [ $RC -eq 255 ] && [ $retries_left -gt 0 ]; then
            echo "Command failed. Retrying in $wait seconds..." >&2
            sleep $wait
            retries_left=$((retries_left - 1))
            wait=$((wait * 2))
        else
            return $RC
        fi
    done
}

function package_install {
    # Note: Expects the name of the package to contain an executable of the same name
    # which is installed on the path. If this assumption isn't invalid we'll attempt
    # to install the package each time this is ran
    refresh_pkgs
    for pkg in "$@"; do
        if [[ ! -x "$(command -v $pkg)" ]]; then
            if [[ -x "$(command -v yum)" ]]; then
              echo_eval ${SUDO} yum -y install $pkg
            elif [[ -x "$(command -v apt-get)" ]]; then
                echo_eval ${SUDO} apt-get -y install $pkg
            elif [[ -x "$(command -v brew)" ]]; then
                echo_eval brew install $pkg
            else
                echo "Unsupported package manager" >&2
                return 1
            fi
        else
            echo "$pkg is already installed"
        fi
    done
}

function install_aurora_credentials {
    [[ $INSTALLED_AURORA_CREDENTIALS == true ]] && return 0

    package_install jq
    install_cloudspy

    # Create the .pgpass file
    [ -z "$PGPASSFILE" ] && export PGPASSFILE=$(pwd)/.pgpass
    echo_eval touch $PGPASSFILE
    echo_eval chmod u=rw,go= $PGPASSFILE

    # Generate AURORA_* environmental variables and install password to PGPASSFILE
    AURORA_EIS_CREDENTIALS=$(aws-eisdb-credentials $@ --output json)

    export AURORA_READER_ENDPOINT=$(jq -r .reader <<< $AURORA_EIS_CREDENTIALS)
    export AURORA_DATABASE=$(jq -r .dbname <<< $AURORA_EIS_CREDENTIALS)
    export AURORA_USER=$(jq -r .username <<< $AURORA_EIS_CREDENTIALS)
    export AURORA_PORT=$(jq -r .port <<< $AURORA_EIS_CREDENTIALS)

    INSTALLED_AURORA_CREDENTIALS=true
}

[[ $CI_DISPOSABLE_ENVIRONMENT == "true" ]] && SUDO="" || SUDO="sudo"

function refresh_pkgs() {
    [[ $REFRESHED_PKGS == true ]] && return 0

    if [[ -x "$(command -v apt-get)" ]]; then
        echo_eval ${SUDO} apt-get update
    elif [[ -x "$(command -v brew)" ]]; then
        echo_eval brew update
    fi

    REFRESHED_PKGS=true
}

function install_python() {
    [[ $INSTALLED_PYTHON == true ]] && return 0

    # Don't re-install Python 3 if it already exists as this might run in a python docker image where
    # the specific version of 3 that we want is already installed.
    # When Python 3 is already installed ensure that venv is also correctly installed.
    local tmp=$(mktemp -dt venv.XXXXXXXX)
    if ! [[ -x "$(command -v python3)" ]] || ! (python3 -m venv $tmp > /dev/null && rm -rf $tmp); then
        refresh_pkgs
        if [[ -x "$(command -v yum)" ]]; then
            echo_eval ${SUDO} yum -y -d1 install python3
        elif [[ -x "$(command -v apt-get)" ]]; then
            echo_eval ${SUDO} apt-get -y install python3 python3-venv
        fi
    fi

    # Ignore built-in python3 on Mac
    if [[ "$(command -v brew)" ]]; then
        refresh_pkgs
        if [[ "$(command -v python3)" == "/usr/bin/python3" ]]; then
            echo_eval "(brew install python && brew link --overwrite python) || (brew upgrade python && brew cleanup python)"
        fi
    fi

    # enter_python_venv calls this function so we need to set the flag early so we don't end
    # up in an infinite loop
    INSTALLED_PYTHON=true

    # Always enter a virtualenv to ensure we can just call `python` and `pip` and use Python 3
    enter_python_venv
}

function install_awscli() {
    [[ $INSTALLED_AWSCLI == true ]] && return 0

    # PyYAML requires gcc
    if ! [[ -x "$(command -v gcc)" ]]; then
        refresh_pkgs
        if [[ -x "$(command -v yum)" ]]; then
            echo_eval ${SUDO} yum -y -d1 install gcc
        elif [[ -x "$(command -v apt-get)" ]]; then
            echo_eval ${SUDO} apt-get -y install gcc
        elif [[ -x "$(command -v brew)" ]]; then
            echo_eval brew install gcc
        fi
    fi

    install_python

    echo_eval python3 -m pip install --upgrade awscli
    echo_eval aws --version  # Note: Also displays the Python version

    INSTALLED_AWSCLI=true
}

function install_python_dev(){
    refresh_pkgs
    install_python

    # Check if dev python is already installed
    # Prevents older versions from overwriting manually installed python on some docker images
    check_py="from distutils import sysconfig as s; dir = s.get_python_inc(); from os.path import isfile; import sys; sys.exit(not isfile(dir + '/Python.h'))"
    python3 -c "$check_py" 2>/dev/null && return 0

    if [[ -x "$(command -v yum)" ]]; then
        echo_eval ${SUDO} yum -y -d1 install gcc python3-devel
    elif [[ -x "$(command -v apt-get)" ]]; then
        echo_eval ${SUDO} apt-get -y install python3-dev
    fi
}

function install_cloudspy() {
    [[ $INSTALLED_CLOUDSPY == true ]] && return 0

    install_python_dev

    if [[ -x "$(command -v yum)" ]]; then
        echo_eval ${SUDO} yum -y -d1 install git
    elif [[ -x "$(command -v apt-get)" ]]; then
        echo_eval ${SUDO} apt-get -y install git
    fi

    install_private_pypi_creds

    # Optionally disable binary install
    opt=""
    [[ "$NO_BINARY" == "true" ]] && opt="--no-binary :all:"
    echo_eval python3 -m pip install --upgrade cloudspy $opt

    # Needs to be defined here for the ".deploy" jobs
    echo_eval export AWS_SHARED_CREDENTIALS_FILE="$(pwd)/aws-creds-${CI_PIPELINE_ID}"

    # Retain any user specified credentials in the new file. Needed on macOS runners.
    if [ -f ~/.aws/credentials ]; then
        echo_eval cp ~/.aws/credentials $AWS_SHARED_CREDENTIALS_FILE
    fi

    # Specify a custom configuration file for using cloudspy as an AWS CLI plugin
    echo_eval export AWS_CONFIG_FILE="$(pwd)/aws-config-${CI_PIPELINE_ID}"

    # Retain any user specified config in the new file. Needed on macOS runners.
    if [ -f ~/.aws/config ]; then
        echo_eval cp ~/.aws/config $AWS_CONFIG_FILE
    fi

    cloudspy configure --auto-skip  # Skip installation of alias file

    INSTALLED_CLOUDSPY=true
}

function stack_name() {
    # replaces all characters that aren't alphanumerics or newlines with `-`
    local prefix=$(echo $1 | tr -sc '[:alnum:]\n' '-')
    # Limit characters (stackname + -TestRole, must be <= 64 characters)
    local character_limit=${2:-55} # Default is 55
    local hash_size=${3:-0} # Default is 0
    local stackname=""

    if [ -z "$prefix" ]; then
        echo 'A stack prefix must be provided to `stack_name`' >&2
        return 1
    fi

    # Make unique stacks for each executed pipeline for the default branch. This will allow fast successive merges
    # to work correctly.
    if [[ ${CI_COMMIT_REF_SLUG} == ${CI_DEFAULT_BRANCH} ]]; then
        stackname="${prefix}-${CI_DEFAULT_BRANCH}-${CI_PIPELINE_ID}"
    else
        stackname="${prefix}-${CI_COMMIT_REF_SLUG//\//-}"  # Replace any forward slashes with a hyphen
    fi

    local hash_string=""
    if [[ "$hash_size" > 0 ]]; then
        hash_string="-$(echo -n $stackname | sha256sum | cut -c1-$hash_size)"
        character_limit=$((character_limit-(hash_size+1)))
    fi

    stackname="${stackname:0:character_limit}"
    stackname="${stackname%-}" # Remove ending hyphen if it exists
    echo $stackname$hash_string
}

function stack_status() {
    local stack_name=$1
    local status

    install_awscli >&2

    # Note: Rather slow as this lists information for all activate/deleted stacks and filters locally
    # Note: Cannot use `--output text` as there seems to be a bug where multiple "None" values are given even though we ask for only a single status
    status=$(handle_throttling 'aws cloudformation list-stacks --query "reverse(sort_by(StackSummaries[?StackName==\`'$stack_name'\`],&CreationTime))[0].StackStatus" --output json')

    if [[ "$status" != null ]]; then
        echo $status | sed 's/"//g'
    else
        echo "Unable to retrieve stack status for stack name $stack_name"
        return 1
    fi
}

function stack_exists() {
    local stack_name=$1
    local error

    install_awscli >&2

    error=$(aws cloudformation describe-stacks --stack-name $stack_name 2>&1 >/dev/null)

    if [[ -z "$error" ]]; then
        return 0
    elif [[ "$error" =~ "Stack with id $stack_name does not exist" ]]; then
        return 1
    else
        echo "$error" >&2
        return 2
    fi
}

function aws_account_id() {
    if [[ ! -x "$(command -v aws)" ]] && [[ -x "$(command -v curl)" ]] && curl -s --max-time 2 http://169.254.169.254 &> /dev/null; then
        curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep -oP '(?<="accountId" : ")[^"]*(?=")'
    else
        install_awscli >&2
        aws sts get-caller-identity --query Account --output text
    fi
}

function aws_region() {
    if [[ -x "$(command -v curl)" ]] && curl -s --max-time 2 http://169.254.169.254 &> /dev/null; then
        curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep -oP '(?<="region" : ")[^"]*(?=")'
    else
        install_awscli >&2
        # This will return "" if a region is not specified in the config
        aws configure get region
    fi
}

function assume_test_role() {
    local role
    if [[ -n "$1" && ! "$1" =~ ^-- ]]; then
        role=$1
        shift
    fi

    if [[ "$role" =~ ^arn: ]]; then
        role=$role
    elif [[ -n "$role" && ! "$role" =~ ^arn ]]; then
        role="arn:aws:iam::$(aws_account_id):role/${role}"
    elif [[ -z "$role" && -n "$STACK_NAME" ]]; then
        role="arn:aws:iam::$(aws_account_id):role/${STACK_NAME}-TestRole"
    else
        echo 'Either a test role or STACK_NAME must be specified' >&2
        return 1
    fi

    install_cloudspy

    echo_eval aws-credentials \
      --credentials-file $AWS_SHARED_CREDENTIALS_FILE \
      --role-arn $role \
      --role-session-name "test-${CI_PIPELINE_ID}" \
      $@
    export AWS_PROFILE="test-${CI_PIPELINE_ID}"
}

function unassume_test_role() {
    if [[ $AWS_PROFILE == "test-${CI_PIPELINE_ID}" ]]; then
        unset AWS_PROFILE
    fi
}

function within_venv() {
    install_python

    # https://stackoverflow.com/a/42580137
    python3 -c 'import sys; sys.exit(0) if hasattr(sys, "real_prefix") or (hasattr(sys, "base_prefix") and sys.base_prefix != sys.prefix) else sys.exit(1)'
}

# Create a python 3 virtual env and make sure pip is at the latest version
# You will need to deactivate the venv yourself
#
# Arguments:
# $1: venv name [Optional]
function enter_python_venv {
    # We need python to be installed before running this
    install_python

    local venv=${1:-venv}

    if within_venv; then
        # Note: Only macOS doesn't have realpath installed by default
        if ! [[ -x "$(command -v realpath)" ]]; then
            refresh_pkgs
            if [[ -x "$(command -v yum)" ]]; then
                echo_eval ${SUDO} yum -y -d1 install coreutils
            elif [[ -x "$(command -v apt-get)" ]]; then
                echo_eval ${SUDO} apt-get -y install coreutils
            elif [[ -x "$(command -v brew)" ]]; then
                echo_eval brew install coreutils
            fi
        fi

        # When a venv name is not specified we only care that we reside in a venv
        if [[ -z "$1" ]]; then
            return

        # If the VIRTUAL_ENV matches the specified venv we are already within the right venv
        elif [[ -n "$VIRTUAL_ENV" && "$(realpath $VIRTUAL_ENV)" == "$(realpath $(pwd)/${venv})" ]]; then
            return

        # Deactivate if we are in another venv
        elif [[ -n "$VIRTUAL_ENV" ]]; then
            echo_eval deactivate
        fi
    fi

    # If there is already a virtualenv with that name, activate it and exit
    if [[ -d ./$venv ]] ; then
        # Activate the one we want
        echo_eval source ./${venv}/bin/activate
    else
        # Create and activate the venv we want
        echo_eval python3 -m venv $venv
        echo_eval source ./${venv}/bin/activate
        echo_eval python3 -m pip install --index-url https://pypi.org/simple --upgrade pip wheel
    fi
}

function install_private_pypi_creds {
    [[ $INSTALLED_PRIVATE_PYPI_CREDS == true ]] && return 0

    # We don't need python installed here specifically, but we might as well
    install_python

    # The private pypi credentials exist as CI Variables CI_PYPI_USERNAME and CI_PYPI_PASSWORD

    # Write the .pip config file
    PIPCONF=$HOME/.pip
    mkdir -p $PIPCONF
    echo "Creating: $PIPCONF/pip.conf"
    cat >$PIPCONF/pip.conf <<EOL
[global]
index-url = https://$CI_PYPI_USERNAME:$CI_PYPI_PASSWORD@gitlab.invenia.ca/api/v4/projects/501/packages/pypi/simple/
extra-index-url = https://pypi.org/simple/
EOL

    # Write the .pypirc config file
    echo "Creating: $HOME/.pypirc"
    cat >$HOME/.pypirc <<EOL
[distutils]
index-servers = gitlab

[gitlab]
repository: https://gitlab.invenia.ca/api/v4/projects/501/packages/pypi/
username: $CI_PYPI_USERNAME
password: $CI_PYPI_PASSWORD
EOL

    INSTALLED_PRIVATE_PYPI_CREDS=true
}

function docker_image_cp {
    local image=$1
    local source=$2  # Path from within image
    local dest=$3    # Path on local system

    local container_id=$(docker create ${image})

    # Note: `() && rc=$? || rc=$?` allows the subshell to always succeed and record the return code
    local rc
    (docker cp ${container_id}:${source} ${dest}) && rc=$? || rc=$?

    docker rm ${container_id}
    return $rc
}

function rescale_json_values {
    local filename=$1
    local time_unit=$2
    local mem_unit=$3
    local alloc_unit=$4

    if [ -z "$filename" ]; then
        echo 'A benchmark filename must be provided' >&2
        return 1
    fi

    if [ -z "$time_unit" ]; then
        time_unit=ns
    fi

    if [ -z "$mem_unit" ]; then
        mem_unit=b
    fi

    jq --sort-keys \
        --arg time_unit $time_unit \
        --arg mem_unit $mem_unit \
        --arg alloc_unit "$alloc_unit" \
        --argjson units '{
            "time": {"ns": 1, "us": 1e3, "ms": 1e6, "s": 1e9, "m": 6e10, "h": 3.6e12},
            "memory": {"b": 0, "KiB": 1, "MiB": 2, "GiB": 3},
            "allocs": {"": 0, "K": 3, "M": 6, "G": 9, "T": 12}
        }' \
        'with_entries(
            if (.key | endswith("time")) then {key: (.key + "(" + $time_unit + ")"), value: (.value / $units.time[$time_unit] | . * 100 | floor | . / 100)}
            elif (.key | endswith("memory")) then {key: (.key + "(" + $mem_unit + ")"), value: ((.value / pow(1024; $units.memory[$mem_unit])) | . * 100 | floor | . / 100)}
            elif (.key | endswith("allocs")) then {key: (.key + "(" + $alloc_unit + ")"), value: ((.value / pow(10; $units.allocs[$alloc_unit])) | . * 100 | floor | . / 100)}
            else .
            end
        )' $filename
}

function format_benchmark_reports {
    local filename=$1
    local source_name=$2
    local nesting_level=$3
    local save_path=$4

    if [ -z "$filename" ]; then
        echo 'A benchmark filename must be provided' >&2
        return 1
    fi

    if [ -z "$source_name" ]; then
        source_name=metrics
    fi

    exclude="^$"
    if [ -n "$nesting_level" ]; then
        exclude="([|].*?){$nesting_level,}"
    fi

    if [ -z "$save_path" ]; then
        save_path=$(dirname $filename)
    fi

    # Filter values if needed
    filtered=$(jq --arg regexp $exclude 'with_entries(select(.key | test($regexp)| not))' $filename)

    # Add quotes to ensure keys with spaces don't get cut off
    echo $filtered | jq -r --arg source $source_name 'to_entries[] | "\"\($source) | \(.key)\" \(.value)"' > $save_path/metrics.txt
    # Remove gc times from fancy comparison widget
    echo $filtered | jq --arg source $source_name '
        with_entries(select(.key | test(".*gctime.{0,4}")| not)) |
        [ { subject: $source, metrics: [ to_entries[] | { name: .key,  value, "desiredSize": "smaller" } ] } ]
    ' > $save_path/performance.json
}

function validate_tag {
    local tag=$1
    # # A semantic version which contains an optional pre-release component (https://semver.org/spec/v2.0.0.html)
    # Note: we don't start our version numbers with `v` like Julia packages do.
    if [[ ! $tag =~ ^[0-9]+\.[0-9]+\.[0-9]+(\-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
        echo "Invalid tag format given for $tag" >&2
        return 1
    fi
}

function get_major_version {
    local tag=$1
    v=$(echo $tag | grep -o "^[0-9]\+")
    echo $v
}

function get_minor_version {
    local tag=$1
    v=$(echo $tag | grep -o "^[0-9]\+\.[0-9]\+\.[0-9]\+" | grep -o "\.[0-9]\+\." | perl -pe 's/\.//g')
    echo $v
}

function get_patch_version {
    local tag=$1
    v=$(echo $tag | grep -o "^[0-9]\+\.[0-9]\+\.[0-9]\+" | grep -o "[0-9]\+\$")
    echo $v
}

function get_version_type {
    local tag=$1
    local result

    validate_tag $tag

    if [[ "$tag" =~ [1-9]+\.0\.0 ]]; then
        result=major
    elif [[ "$tag" =~ [1-9]+\.[1-9]+\.0 ]]; then
        result=minor
    else
        result=patch
    fi

    echo $result
}

function bump_major_version {
    local current_tag=$1
    local major=$(get_major_version $current_tag)

    echo $(($major+1)).0.0
}

function bump_minor_version {
    local current_tag=$1
    local major=$(get_major_version $current_tag)
    local minor=$(get_minor_version $current_tag)

    echo $major.$((minor+1)).0
}

function bump_patch_version {
    local current_tag=$1
    local major=$(get_major_version $current_tag)
    local minor=$(get_minor_version $current_tag)
    local patch=$(get_patch_version $current_tag)

    echo $major.$minor.$((patch+1))
}

function create_release_candidate {
    local prod_tag=$1
    local labels=$2
    local RC

    validate_tag $prod_tag || return $?

    case $labels in
        *version::external*)
            new_tag=$(bump_major_version $prod_tag)-rc
            RC=$?
            ;;
        *version::internal*)
            new_tag=$(bump_minor_version $prod_tag)-rc
            RC=$?
            ;;
        *version::bugfix*)
            new_tag=$(bump_patch_version $prod_tag)-rc
            RC=2  # signals we push straight to prod
            ;;
        *)
            echo "No valid version label found in $labels" >&2
            return 1  # signals error
            ;;
    esac

    validate_tag $new_tag || return $?

    echo $new_tag
    return $RC
}
